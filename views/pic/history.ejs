<%- include('../partials/header') %>

<div class="flex justify-between items-center mb-6">
    <h1 class="text-3xl font-bold text-gray-800">Riwayat Alokasi Pengguna
</div>

<div class="bg-white p-4 rounded-lg shadow-md mb-6">
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <input type="text" id="searchInput" placeholder="Cari Nama atau Kode..." value="<%= filters.query %>"
               class="md:col-span-2 p-2 border rounded-md">
        <select id="typeFilter" class="p-2 border rounded-md">
            <option value="all" <%= filters.type === 'all' ? 'selected' : '' %>>Semua Tipe</option>
            <option value="individual" <%= filters.type === 'individual' ? 'selected' : '' %>>Sendiri</option>
            <option value="group" <%= filters.type === 'group' ? 'selected' : '' %>>Rombongan</option>
        </select>
        <input type="date" id="dateFilter" value="<%= filters.date %>" class="p-2 border rounded-md">
    </div>
</div>

<div id="history-content">
    <%- include('./partials/history-table', { allocations, currentPage, totalPages }) %>
</div>

<script>
    const searchInput = document.getElementById('searchInput');
    const typeFilter = document.getElementById('typeFilter');
    const dateFilter = document.getElementById('dateFilter');
    const contentDiv = document.getElementById('history-content');

    let debounceTimer;

    function fetchHistory(page = 1) {
        const query = searchInput.value;
        const type = typeFilter.value;
        const date = dateFilter.value;

        // Update URL without reloading page
        const url = new URL(window.location);
        url.searchParams.set('page', page);
        url.searchParams.set('query', query);
        url.searchParams.set('type', type);
        url.searchParams.set('date', date);
        window.history.pushState({}, '', url);

        // Fetch new content
        fetch(url, {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.text())
        .then(html => {
            contentDiv.innerHTML = html;
        })
        .catch(error => console.error('Error fetching history:', error));
    }

    // Debounce function to limit how often fetchHistory is called
    function debounceFetch() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            fetchHistory(1); // Go to first page on new search/filter
        }, 300); // 300ms delay
    }

    searchInput.addEventListener('input', debounceFetch);
    typeFilter.addEventListener('change', debounceFetch);
    dateFilter.addEventListener('change', debounceFetch);

    // Handle pagination clicks
    contentDiv.addEventListener('click', (e) => {
        if (e.target.matches('.pagination-link')) {
            e.preventDefault();
            const page = e.target.dataset.page;
            fetchHistory(page);
        }
    });
</script>

<%- include('../partials/footer') %>